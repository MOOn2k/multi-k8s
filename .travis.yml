# выполнять эти команды как sudo ?
sudo: required
# какие с ервисы должны быть предустановлены для выполненяи команды ниже ?
services:
  - docker
env:
  global:
    # Записываем id последнего коммита в используемой версии чтобы использовать его в качестве тега для билда докера
    - SHA=$(git rev-parse HEAD)
    # Будет подхвачена gcloud и использована для отключения интерфейсов ввода в процессе работы
    - CLOUDSDK_CORE_DISABLE_PROMPTS=1
before_install:
  # Travis gem
  # 1.3.2. результат п 1.3.1. с инструкциями по расшифровке service-account.json
  - openssl aes-256-cbc -K $encrypted_9f3b5599b056_key -iv $encrypted_9f3b5599b056_iv -in service-account.json.enc -out service-account.json -d
  # Google cloud sdk
  # 1.1. установка
  # - получаем с урла текст скрипта установки "curl https://sdk.cloud.google.com"
  # - используя пайп говорим чтобы с выводом этой команды, т.е. скриптом, запустился bash "| bash"
  # - далее через символ "> /dev/null" говорим чтобы весь вывод свой тот писал в пустоту
  # PS: установка в оф документации отличсается доп флагом и отсуствием "> /dev/null"
  # https://cloud.google.com/sdk/docs/downloads-interactive#silent
  - curl https://sdk.cloud.google.com | bash > /dev/null;
  # 1.2. инициализация
  # очередное выполнения скрипта из места установки
  # PS: оф документация вместо этого делает gcloud init
  # https://cloud.google.com/sdk/docs/initializing
  - source $HOME/google-cloud-sdk/path.bash.inc
  # 1.2.1. обновляем в нем kubectl, на всякий случай
  - gcloud components update kubectl
  # 1.3. Travis gem - генерация зашифрованного ключа для Google Cloud
  # 1.3.1. установка
  # - через IAM Google Cloud добавлем 'service account' с правами админа k8s и качаем для него ключ в json
  # - ставим travis gem
  # - travis login --com (через github)
  # - travis encrypt-file service-account.json -r MOOn2k/multi-k8s --com
  # PS: проще сделать через кеонтейнер docker run -it -v "$(pwd):/app" ruby:2.4 sh
  # 1.3.3. с его помощью выполняем авторизацию Google Cloud
  # PS: почему нет .enc на конце ? потмоу что в п. 1.3.2. он уже расшифрован и лежит в корне
  - gcloud auth activate-service-account --key-file service-account.json
  # 1.4. выбираем проект по его ID
  - gcloud config set project multi-k8s-281522
  # 1.5. выбираем используемый нашим кластером location
  - gcloud config set compute/zone europe-north1-c
  # 1.5. выбираем имя кластера
  - gcloud container clusters get-credentials multi-cluster
  # Docker CLI
  # 2.1.
  # - добавляем $DOCKERHUB_PASSWORD и $DOCKERHUB_LOGIN в TravisCI
  # - логинимся в клиент докера
  # PS: --password-stdin открывает ввод для пароля, а echo его подставляет
  - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_LOGIN" --password-stdin
  # 2.2.
  # Собираем имейдж для тестов
  - docker build -t moon2k/complex-client-test -f ./client/Dockerfile.dev ./client

scripts:
  # 3. Запускаем тест
  # PS: Выставление глобальной переменной '-e СI=true' даст понять react-app что тесты выполняются для нужд CI
  # https://create-react-app.dev/docs/running-tests/#linux-macos-bash
  - docker run -e CI=true moon2k/complex-client-test npm run test

deploy:
  # 4. TravisCI не знает как деплоить k8s на GC, потому мы описываем процесс руками
  provider: script
  script: bash ./deploy.sh
  # выполняем только для ветки master
  on:
    branch: master
